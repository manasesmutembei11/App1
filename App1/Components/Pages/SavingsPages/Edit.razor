@page "/Savings/edit"
@inject App1.Data.App1Context DB
@using App1.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Savings</h4>
<hr />
@if (Savings is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Savings" OnValidSubmit="UpdateSavings" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Savings.Id" value="@Savings.Id" />
                <div class="mb-3">
                    <label for="goalname" class="form-label">GoalName:</label>
                    <InputText id="goalname" @bind-Value="Savings.GoalName" class="form-control" />
                    <ValidationMessage For="() => Savings.GoalName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="targetamount" class="form-label">TargetAmount:</label>
                    <InputNumber id="targetamount" @bind-Value="Savings.TargetAmount" class="form-control" />
                    <ValidationMessage For="() => Savings.TargetAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currentamount" class="form-label">CurrentAmount:</label>
                    <InputNumber id="currentamount" @bind-Value="Savings.CurrentAmount" class="form-control" />
                    <ValidationMessage For="() => Savings.CurrentAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="targetdate" class="form-label">TargetDate:</label>
                    <InputDate id="targetdate" @bind-Value="Savings.TargetDate" class="form-control" />
                    <ValidationMessage For="() => Savings.TargetDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="savingdescription" class="form-label">SavingDescription:</label>
                    <InputText id="savingdescription" @bind-Value="Savings.SavingDescription" class="form-control" />
                    <ValidationMessage For="() => Savings.SavingDescription" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/savings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Savings? Savings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Savings ??= await DB.Savings.FirstOrDefaultAsync(m => m.Id == Id);

        if (Savings is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSavings()
    {
        DB.Attach(Savings!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SavingsExists(Savings!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/savings");
    }

    bool SavingsExists(int id)
    {
        return DB.Savings.Any(e => e.Id == id);
    }
}
